-- View erstellen
drop view CALC.VIEW_PRE_FACILITY_ALIS_RAHMEN;
create or replace VIEW CALC.VIEW_PRE_FACILITY_ALIS_RAHMEN AS
with
    MAX_CUT_OFF_DATE as (
        select MAX(CUT_OFF_DATE) as CUT_OFF_DATE from CALC.SWITCH_PORTFOLIO_CURRENT
    ),
    ALIS as (
        select CREDITLINEFACILITYID, min(EXTERNALLIMITVALIDFROMDATE) AS ORIGINATION_DATE, max(EXTERNALLIMITVALIDTODATE)  AS MATURITY_DATE, BRANCH,
               CUTOFFDATE, Current_USER as CREATED_USER, Current_TIMESTAMP as CREATED_TIMESTAMP
        from NLB.ALIS_KONTO
        group by CREDITLINEFACILITYID,BRANCH,CUTOFFDATE,STATUS
            union
        select CREDITLINEFACILITYID, min(EXTERNALLIMITVALIDFROMDATE) AS ORIGINATION_DATE, max(EXTERNALLIMITVALIDTODATE)  AS MATURITY_DATE, BRANCH,
               CUTOFFDATE, Current_USER as CREATED_USER, Current_TIMESTAMP as CREATED_TIMESTAMP
        from BLB.ALIS_KONTO
        group by CREDITLINEFACILITYID,BRANCH,CUTOFFDATE
    )
select PORTFOLIO.FACILITY_ID, ALIS.*
from ALIS as ALIS
inner join CALC.SWITCH_PORTFOLIO_CURRENT as PORTFOLIO on TRANSLATE(trim(L '0' from substr(PORTFOLIO.FACILITY_ID,11,10)),'','_') = ALIS.CREDITLINEFACILITYID
                                                        and SUBSTR(PORTFOLIO.FACILITY_ID,6,2) = '11'
                                                        and coalesce(PORTFOLIO.BRANCH_SYSTEM,'NLB')=ALIS.BRANCH
                                                        and PORTFOLIO.CUT_OFF_DATE=ALIS.CUTOFFDATE
where LEFT(PORTFOLIO.FACILITY_ID,1) <> 'K' -- keine LUX Konten hier
;

-- CI START FOR ALL TAPES
-- Current-Tabelle erstellen
call STG.TEST_PROC_BACKUP_AND_DROP('AMC','TABLE_PRE_FACILITY_ALIS_RAHMEN_CURRENT');
create table AMC.TABLE_PRE_FACILITY_ALIS_RAHMEN_CURRENT like CALC.VIEW_PRE_FACILITY_ALIS_RAHMEN distribute by hash(FACILITY_ID) in SPACE_AMC_A,SPACE_AMC_B,SPACE_AMC_C,SPACE_AMC_D,SPACE_AMC_E,SPACE_AMC_F;
create index AMC.INDEX_PRE_FACILITY_ALIS_RAHMEN_CURRENT_FACILITY_ID on AMC.TABLE_PRE_FACILITY_ALIS_RAHMEN_CURRENT (FACILITY_ID);
call STG.TEST_PROC_LOAD_AND_DROP_BACKUP_FOR('AMC','TABLE_PRE_FACILITY_ALIS_RAHMEN_CURRENT');
-- Archiv-Tabelle erstellen
call STG.TEST_PROC_BACKUP_AND_DROP('AMC','TABLE_PRE_FACILITY_ALIS_RAHMEN_ARCHIVE');
create table AMC.TABLE_PRE_FACILITY_ALIS_RAHMEN_ARCHIVE like AMC.TABLE_PRE_FACILITY_ALIS_RAHMEN_CURRENT distribute by hash(FACILITY_ID) partition by RANGE (CUTOFFDATE) (starting '1.1.2015' ending '31.12.2025' EVERY 1 MONTH) in SPACE_AMC_A,SPACE_AMC_B,SPACE_AMC_C,SPACE_AMC_D,SPACE_AMC_E,SPACE_AMC_F;
create index AMC.INDEX_PRE_FACILITY_ALIS_RAHMEN_ARCHIVE_FACILITY_ID on AMC.TABLE_PRE_FACILITY_ALIS_RAHMEN_ARCHIVE (FACILITY_ID);
call STG.TEST_PROC_LOAD_AND_DROP_BACKUP_FOR('AMC','TABLE_PRE_FACILITY_ALIS_RAHMEN_ARCHIVE');
-- CI END FOR ALL TAPES

-- SWITCH Views erstellen
call STG.TEST_PROC_DROP_AND_CREATE_SWITCH('AMC','TABLE_PRE_FACILITY_ALIS_RAHMEN_CURRENT');
call STG.TEST_PROC_DROP_AND_CREATE_SWITCH('AMC','TABLE_PRE_FACILITY_ALIS_RAHMEN_ARCHIVE');