-- View erstellen
drop view CALC.VIEW_NEXT_AMORTIZATION_AMOUNTS;
create view CALC.VIEW_NEXT_AMORTIZATION_AMOUNTS as
with
    PORTFOLIO as (
        select FACILITY_ID AS KONTO, FACILITY_ID_NLB, FACILITY_ID_BLB ,CUT_OFF_DATE from CALC.SWITCH_PORTFOLIO_CURRENT
    ),
    CASH_FLOWS as (
        select * from CALC.SWITCH_CASH_FLOW_FUTURE_AOER_CURRENT where CASH_FLOW_TYPE='TILGUNGSRATE' and ZAHLUNG_DATUM > CUT_OFF_DATE
    )
select distinct
    PORTFOLIO.KONTO                                                                                                    as FACILITYID,
    PORTFOLIO.CUT_OFF_DATE                                                                                             as CUT_OFF_DATE,
    first_value(CASH_FLOW.CASH_FLOW_VALUE_CURRENCY)         over (partition by CASH_FLOW.FACILITY_ID,CASH_FLOW.CUT_OFF_DATE order by ZAHLUNG_DATUM asc)   as ZAHLUNGSSTROM_BTR_next,
    first_value(CASH_FLOW.CASH_FLOW_VALUE_CURRENCY_ISO)     over (partition by CASH_FLOW.FACILITY_ID,CASH_FLOW.CUT_OFF_DATE order by ZAHLUNG_DATUM asc)   as ZAHLUNGSSTROM_WHRG_next,
    first_value(CASH_FLOW.CASH_FLOW_VALUE_CURRENCY)         over (partition by CASH_FLOW.FACILITY_ID,CASH_FLOW.CUT_OFF_DATE order by VALUTA_DATE   asc)   as ZAHLUNGSSTROM_BTR_next_byval,
    first_value(CASH_FLOW.CASH_FLOW_VALUE_CURRENCY_ISO)     over (partition by CASH_FLOW.FACILITY_ID,CASH_FLOW.CUT_OFF_DATE order by VALUTA_DATE   asc)   as ZAHLUNGSSTROM_WHRG_next_byval,
    first_value(CASH_FLOW.CASH_FLOW_VALUE_CURRENCY)         over (partition by CASH_FLOW.FACILITY_ID,CASH_FLOW.CUT_OFF_DATE order by ZAHLUNG_DATUM desc)  as ZAHLUNGSSTROM_BTR_last,
    first_value(CASH_FLOW.CASH_FLOW_VALUE_CURRENCY_ISO)     over (partition by CASH_FLOW.FACILITY_ID,CASH_FLOW.CUT_OFF_DATE order by ZAHLUNG_DATUM desc)  as ZAHLUNGSSTROM_WHRG_last,
    Current_USER                                                                                                       as CREATED_USER,      -- Letzter Nutzer, der diese Tabelle gebaut hat.
    Current_TIMESTAMP                                                                                                  as CREATED_TIMESTAMP  -- Neuester Zeitstempel, wann diese Tabelle zuletzt gebaut wurde.
from CASH_FLOWS AS CASH_FLOW
inner join PORTFOLIO AS PORTFOLIO on (PORTFOLIO.FACILITY_ID_NLB=CASH_FLOW.FACILITY_ID or PORTFOLIO.FACILITY_ID_BLB=CASH_FLOW.FACILITY_ID) and PORTFOLIO.CUT_OFF_DATE  = CASH_FLOW.CUT_OFF_DATE
;

-- CI START FOR ALL TAPES
-- Current-Tabelle erstellen
call STG.TEST_PROC_BACKUP_AND_DROP('AMC','TABLE_NEXT_AMORTIZATION_AMOUNTS_CURRENT');
create table AMC.TABLE_NEXT_AMORTIZATION_AMOUNTS_CURRENT like CALC.VIEW_NEXT_AMORTIZATION_AMOUNTS distribute by hash(FACILITYID) in SPACE_AMC_A,SPACE_AMC_B,SPACE_AMC_C,SPACE_AMC_D,SPACE_AMC_E,SPACE_AMC_F;
create index AMC.INDEX_NEXT_AMORTIZATION_AMOUNTS_CURRENT_FACILITYID on AMC.TABLE_NEXT_AMORTIZATION_AMOUNTS_CURRENT (FACILITYID);
call STG.TEST_PROC_LOAD_AND_DROP_BACKUP_FOR('AMC','TABLE_NEXT_AMORTIZATION_AMOUNTS_CURRENT');
-- Archiv-Tabelle erstellen
call STG.TEST_PROC_BACKUP_AND_DROP('AMC','TABLE_NEXT_AMORTIZATION_AMOUNTS_ARCHIVE');
create table AMC.TABLE_NEXT_AMORTIZATION_AMOUNTS_ARCHIVE like CALC.VIEW_NEXT_AMORTIZATION_AMOUNTS distribute by hash(FACILITYID) partition by RANGE (CUT_OFF_DATE) (starting '1.1.2015' ending '31.12.2030' EVERY 1 Month) in SPACE_AMC_A,SPACE_AMC_B,SPACE_AMC_C,SPACE_AMC_D,SPACE_AMC_E,SPACE_AMC_F;
create index AMC.INDEX_NEXT_AMORTIZATION_AMOUNTS_ARCHIVE_FACILITYID on AMC.TABLE_NEXT_AMORTIZATION_AMOUNTS_ARCHIVE (FACILITYID);
call STG.TEST_PROC_LOAD_AND_DROP_BACKUP_FOR('AMC','TABLE_NEXT_AMORTIZATION_AMOUNTS_ARCHIVE');
-- CI END FOR ALL TAPES

-- SWITCH Views erstellen
call STG.TEST_PROC_DROP_AND_CREATE_SWITCH('AMC','TABLE_NEXT_AMORTIZATION_AMOUNTS_CURRENT');
call STG.TEST_PROC_DROP_AND_CREATE_SWITCH('AMC','TABLE_NEXT_AMORTIZATION_AMOUNTS_ARCHIVE');