-- View erstellen
drop view CALC.VIEW_PRE_FACILITY_ALIS_RAHMEN_2;
create or replace view CALC.VIEW_PRE_FACILITY_ALIS_RAHMEN_2 AS
with
    MAX_CUT_OFF_DATE as (
        select MAX(CUT_OFF_DATE) as CUT_OFF_DATE from CALC.SWITCH_PORTFOLIO_CURRENT
    ),
    ALIS as (
            select distinct CREDITLINEFACILITYID,SKTO, BRANCH, CUTOFFDATE, Current_USER as CREATED_USER, Current_TIMESTAMP as CREATED_TIMESTAMP
            from NLB.ALIS_KONTO
                union
            select distinct CREDITLINEFACILITYID,SKTO, BRANCH, CUTOFFDATE, Current_USER as CREATED_USER, Current_TIMESTAMP as CREATED_TIMESTAMP
            from BLB.ALIS_KONTO
    )
select PORTFOLIO.FACILITY_ID
     ,P2.FACILITY_ID as FACILITY_ID_RAHMEN
     , ALIS.*
from ALIS as ALIS
inner join CALC.SWITCH_PORTFOLIO_CURRENT  as PORTFOLIO        on left(PORTFOLIO.FACILITY_ID,4) <> 'K028'
                                                                and PORTFOLIO.CUT_OFF_DATE=ALIS.CUTOFFDATE
                                                                and trim(L '0' from substr(PORTFOLIO.FACILITY_ID,11,10)) = left(ALIS.Skto,10)
                                                                and coalesce(PORTFOLIO.BRANCH_SYSTEM,'NLB')=ALIS.BRANCH
--inner join MAX_CUT_OFF_DATE             as MAX_CUT_OFF_DATE on PORTFOLIO.CUT_OFF_DATE = MAX_CUT_OFF_DATE.CUT_OFF_DATE
inner join CALC.SWITCH_PORTFOLIO_CURRENT  as P2               on trim(L '0' from substr(P2.FACILITY_ID,11,10)) = left(ALIS.CREDITLINEFACILITYID,10)
                                                                and SUBSTR(P2.FACILITY_ID,6,2) = '11'
                                                                and coalesce(P2.BRANCH_SYSTEM,'NLB')=ALIS.BRANCH
                                                                and P2.CUT_OFF_DATE=ALIS.CUTOFFDATE
;

-- CI START FOR ALL TAPES
-- Current-Tabelle erstellen
call STG.TEST_PROC_BACKUP_AND_DROP('AMC','TABLE_PRE_FACILITY_ALIS_RAHMEN_2_CURRENT');
create table AMC.TABLE_PRE_FACILITY_ALIS_RAHMEN_2_CURRENT like CALC.VIEW_PRE_FACILITY_ALIS_RAHMEN_2 distribute by hash(FACILITY_ID) in SPACE_AMC_A,SPACE_AMC_B,SPACE_AMC_C,SPACE_AMC_D,SPACE_AMC_E,SPACE_AMC_F;
create index AMC.INDEX_PRE_FACILITY_ALIS_RAHMEN_2_CURRENT_FACILITY_ID on AMC.TABLE_PRE_FACILITY_ALIS_RAHMEN_2_CURRENT (FACILITY_ID);
call STG.TEST_PROC_LOAD_AND_DROP_BACKUP_FOR('AMC','TABLE_PRE_FACILITY_ALIS_RAHMEN_2_CURRENT');
-- Archiv-Tabelle erstellen
call STG.TEST_PROC_BACKUP_AND_DROP('AMC','TABLE_PRE_FACILITY_ALIS_RAHMEN_2_ARCHIVE');
create table AMC.TABLE_PRE_FACILITY_ALIS_RAHMEN_2_ARCHIVE like AMC.TABLE_PRE_FACILITY_ALIS_RAHMEN_2_CURRENT distribute by hash(FACILITY_ID) partition by RANGE (CUTOFFDATE) (starting '1.1.2015' ending '31.12.2025' EVERY 1 MONTH) in SPACE_AMC_A,SPACE_AMC_B,SPACE_AMC_C,SPACE_AMC_D,SPACE_AMC_E,SPACE_AMC_F;
create index AMC.INDEX_PRE_FACILITY_ALIS_RAHMEN_2_ARCHIVE_FACILITY_ID on AMC.TABLE_PRE_FACILITY_ALIS_RAHMEN_2_ARCHIVE (FACILITY_ID);
call STG.TEST_PROC_LOAD_AND_DROP_BACKUP_FOR('AMC','TABLE_PRE_FACILITY_ALIS_RAHMEN_2_ARCHIVE');
-- CI END FOR ALL TAPES

-- SWITCH Views erstellen
call STG.TEST_PROC_DROP_AND_CREATE_SWITCH('AMC','TABLE_PRE_FACILITY_ALIS_RAHMEN_2_CURRENT');
call STG.TEST_PROC_DROP_AND_CREATE_SWITCH('AMC','TABLE_PRE_FACILITY_ALIS_RAHMEN_2_ARCHIVE');